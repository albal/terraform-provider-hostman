name: Build & Release Terraform Provider

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'    # only on semver tags, e.g. v1.2.3

permissions:
  contents: write

jobs:
  build:
    name: üèó Build all platforms
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go mod tidy

      - id: build
        name: Build and zip all binaries
        shell: bash
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          PLATFORMS=(
            "linux amd64"
            "linux arm64"
            "linux arm 6"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )
          mkdir -p dist

          for p in "${PLATFORMS[@]}"; do
            read os arch arm <<< "$p"
            export GOOS=$os
            export GOARCH=$arch
            if [ "$arch" = "arm" ]; then export GOARM=$arm; fi

            BIN=terraform-provider-hostman
            [ "$os" = "windows" ] && BIN=${BIN}.exe

            OUT=terraform-provider-hostman_${VERSION}_${os}_${arch}.zip

            # build + strip symbols
            go build -ldflags="-s -w" -o $BIN

            # package
            zip -j dist/$OUT $BIN

            # clean up
            rm $BIN
          done

      - name: Upload all zips
        uses: actions/upload-artifact@v2
        with:
          name: provider-dist
          path: dist/*.zip

  release:
    name: üöÄ Publish GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ replace(github.ref_name, 'v', '') }}

    steps:
      - name: Download built zips
        uses: actions/download-artifact@v2
        with:
          name: provider-dist
          path: dist/

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo -e "trust\n5\ny\nquit" | \
            gpg --batch --command-fd 0 --edit-key \
              "$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5}')"

      - name: Sign every zip
        run: |
          for z in dist/*.zip; do
            gpg --batch --yes \
                --pinentry-mode loopback \
                --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --output "${z}.sig" \
                --detach-sign "$z"
          done

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: |
            ${{ format("dist/terraform-provider-hostman_%s_linux_amd64.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_linux_amd64.zip.sig", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_linux_arm64.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_linux_arm64.zip.sig", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_linux_arm.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_linux_arm.zip.sig", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_darwin_amd64.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_darwin_amd64.zip.sig", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_darwin_arm64.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_darwin_arm64.zip.sig", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_windows_amd64.zip", env.VERSION) }}
            ${{ format("dist/terraform-provider-hostman_%s_windows_amd64.zip.sig", env.VERSION) }}
