name: Build & Release Terraform Provider

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'    # e.g. v1.2.3

permissions:
  contents: write

jobs:
  build:
    name: 🏗 Build all platforms
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go mod tidy

      - name: Determine version
        id: version
        run: |
          # strip "refs/tags/v" → "1.2.3"
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Build & zip all binaries
        run: |
          mkdir -p dist
          PLATFORMS=(
            "linux amd64"
            "linux arm64"
            "linux arm 6"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )
          for p in "${PLATFORMS[@]}"; do
            read os arch arm <<<"$p"
            export GOOS=$os
            export GOARCH=$arch
            [ "$arch" = "arm" ] && export GOARM=$arm

            BIN=terraform-provider-hostman
            [ "$os" = "windows" ] && BIN=$BIN.exe

            OUT=terraform-provider-hostman_${VERSION}_${os}_${arch}.zip

            go build -ldflags="-s -w" -o $BIN .
            zip -j dist/$OUT $BIN
            rm $BIN
          done

      - name: Upload zips
        uses: actions/upload-artifact@v4
        with:
          name: provider-dist
          path: dist/*.zip

  release:
    name: 🚀 Publish GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download zips
        uses: actions/download-artifact@v4
        with:
          name: provider-dist
          path: dist/

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo -e "trust\n5\ny\nquit" | \
            gpg --batch --command-fd 0 --edit-key \
              "$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5}')"

      - name: Sign each zip
        run: |
          for z in dist/*.zip; do
            gpg --batch --yes \
                --pinentry-mode loopback \
                --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
                --output "${z}.sig" \
                --detach-sign "$z"
          done

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          artifacts: |
            dist/*.zip
            dist/*.sig
