name: Build & Release Terraform Provider (Linux)

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'    # semantic-version tags, e.g. v1.2.3

permissions:
  contents: write

jobs:
  build:
    name: üèó Build linux_amd64
    runs-on: ubuntu-latest
    outputs:
      artifact-name: terraform-provider-hostman_${{ github.ref_name }}_linux_amd64.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go mod tidy

      - name: Build provider binary
        run: |
          mkdir -p bin
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bin/terraform-provider-hostman

      - name: Zip provider for release
        id: zip
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          ARTIFACT=terraform-provider-hostman_${VERSION}_linux_amd64.zip
          zip -j bin/${ARTIFACT} bin/terraform-provider-hostman
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: terraform-provider-hostman-linux-amd64
          path: bin/${{ steps.zip.outputs.artifact }}

  release:
    name: üöÄ Publish GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-provider-hostman-linux-amd64
          path: release/

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          # mark imported key as ultimately trusted
          echo -e "trust\n5\ny\nquit" | \
            gpg --batch --command-fd 0 --edit-key "$(gpg --list-keys --with-colons | awk -F: '/^pub/ { print $5 }')"

      - name: Sign provider ZIP
        run: |
          ARTIFACT=${{ needs.build.outputs.artifact-name }}
          gpg --batch --yes \
              --pinentry-mode loopback \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --output "release/${ARTIFACT}.sig" \
              --detach-sign "release/${ARTIFACT}"

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # if the release doesn't exist it will be created,
          # if it already exists it will simply upload/update assets
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true           # ‚Üê key to avoid ‚Äúalready_exists‚Äù errors :contentReference[oaicite:0]{index=0}
          artifacts: |
            release/${{ needs.build.outputs.artifact-name }}
            release/${{ needs.build.outputs.artifact-name }}.sig
